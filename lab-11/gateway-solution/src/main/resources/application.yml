---
spring:
  application:
    name: lab-11-gateway-solution

  config:
    import: "optional:configserver:http://localhost:8001"    # Where should we call the config server at?

  # TODO-02: Add properties for:
  # spring.security.oauth2.client.registration.github.clientId.
  # spring.security.oauth2.client.registration.github.clientSecret.
  # The values for these will be determined by the next step.
  security:
    oauth2:
      client:
        registration:
          github:
            clientId: DO_NOT_PLACE_CLIENT_ID_HERE
            clientSecret: DO_NOT_PLACE_CLIENT_SECRET_HERE

  # TODO-03: (OPTIONAL) Add properties for:
  # spring.security.oauth2.client.registration.google.clientId.
  # spring.security.oauth2.client.registration.google.clientSecret.

          google:
            client-id: DO_NOT_PLACE_CLIENT_ID_HERE
            client-secret: DO_NOT_PLACE_CLIENT_SECRET_HERE

  # TODO-04: (OPTIONAL) Add properties for the Spring auth server:

          spring-auth-server:
            client-id: api-gateway
            client-secret: doNotTell
            client-name: Spring Authorization Server
            provider: spring-authorization-server
            scope: openid
            redirect-uri: "http://localhost:8080/login/oauth2/code/oidc-client"
            authorization-grant-type: "authorization_code"

  # TODO-05: (OPTIONAL) Add properties to define the Spring auth server as a provider:

        provider:
          spring-authorization-server:
            authorization-uri: "http://localhost:9000/oauth2/authorize"
            token-uri: "http://localhost:9000/oauth2/token"
            jwk-set-uri: "http://localhost:9000/oauth2/jwks" 
            user-name-attribute: "sub"  # Spring security calls the user's name "userName" and it is sent in the "sub" (subject) claim.



  # create spring cloud gateway routes for the verb, subject, article, adjective, and noun services
  cloud:
#    gateway:      # Must be "gateway" for reactive, "gateway.mvc" for non-reactive
    gateway.mvc:      # Must be "gateway" for reactive, "gateway.mvc" for non-reactive
      routes:

      # Any request to /services/subject should route
      # through the load balancer to
      # the subject service's "/" resource:
      - id: subject-service
        uri: lb://subject
        predicates:
          - Path=/services/subject/**
        filters:
          - StripPrefix=2

          # Any request to /services/verb should route
      # through the load balancer to
      # the verb service's "/" resource:
      - id: verb-service
        uri: lb://verb
        predicates:
        - Path=/services/verb/**
        filters:
        - StripPrefix=2

      - id: article-service
        uri: lb://article
        predicates:
        - Path=/services/article/**
        filters:
        - StripPrefix=2
        - RewritePath=/article/(?<segment>.*), /$\{segment}

      - id: adjective-service
        uri: lb://adjective
        predicates:
        - Path=/services/adjective/**
        filters:
          - StripPrefix=2
      - id: noun-service
        uri: lb://noun
        predicates:
        - Path=/services/noun/**
        filters:
          - StripPrefix=2

        # Fallback route:
        # Any request to / should route
        # through the load balancer to
        # the lab-9-sentence-server service's "/" resource:
      - id: web-interface
        uri: lb://lab-11-sentence-server
        predicates:
          - Path=/**
#          - Not=Path=/actuator/**
        

# Expose Actuator endpoints.  Allow application to be more useful from Eureka.
management:
  endpoints.web.exposure.include: health,info,beans,env,configprops,prometheus
  metrics:
    tags:
      application: ${spring.application.name}
  info:
    env.enabled: true
    java.enabled: true
    os.enabled: true
    process.enabled: true
info.active-profiles: ${spring.profiles.active:none}
info.name: ${spring.application.name:none}

logging:
  level:
    org.springframework.web.servlet: DEBUG
